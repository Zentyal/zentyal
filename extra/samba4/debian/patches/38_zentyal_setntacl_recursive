Index: samba-4.0.7/python/samba/netcmd/ntacl.py
===================================================================
--- samba-4.0.7.orig/python/samba/netcmd/ntacl.py	2013-04-09 10:14:59.000000000 +0200
+++ samba-4.0.7/python/samba/netcmd/ntacl.py	2013-07-16 21:09:12.312188111 +0200
@@ -56,14 +56,16 @@
                choices=["native","tdb"]),
         Option("--eadb-file", help="Name of the tdb file where attributes are stored", type="string"),
         Option("--use-ntvfs", help="Set the ACLs directly to the TDB or xattr for use with the ntvfs file server", action="store_true"),
-        Option("--use-s3fs", help="Set the ACLs for use with the default s3fs file server via the VFS layer", action="store_true")
+        Option("--use-s3fs", help="Set the ACLs for use with the default s3fs file server via the VFS layer", action="store_true"),
+        Option("--recursive", help="Set the ACLs recursively on all files and folders under the specified directory", action="store_true"),
         ]
 
     takes_args = ["acl","file"]
 
     def run(self, acl, file, use_ntvfs=False, use_s3fs=False,
             quiet=False,xattr_backend=None,eadb_file=None,
-            credopts=None, sambaopts=None, versionopts=None):
+            credopts=None, sambaopts=None, versionopts=None,
+            recursive=False):
         logger = self.get_logger()
         lp = sambaopts.get_loadparm()
         try:
@@ -87,7 +89,7 @@
         # ensure we are using the right samba_dsdb passdb backend, no matter what
         s3conf.set("passdb backend", "samba_dsdb:%s" % samdb.url)
 
-        setntacl(lp, file, acl, str(domain_sid), xattr_backend, eadb_file, use_ntvfs=use_ntvfs)
+        setntacl(lp, file, acl, str(domain_sid), xattr_backend, eadb_file, use_ntvfs=use_ntvfs, recursive=recursive)
 
         if use_ntvfs:
             logger.warning("Please note that POSIX permissions have NOT been changed, only the stored NT ACL")
Index: samba-4.0.7/python/samba/ntacls.py
===================================================================
--- samba-4.0.7.orig/python/samba/ntacls.py	2013-04-09 10:14:59.000000000 +0200
+++ samba-4.0.7/python/samba/ntacls.py	2013-07-16 21:13:24.648194108 +0200
@@ -84,7 +84,7 @@
         return smbd.get_nt_acl(file, security.SECINFO_OWNER | security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL)
 
 
-def setntacl(lp, file, sddl, domsid, backend=None, eadbfile=None, use_ntvfs=True, skip_invalid_chown=False, passdb=None):
+def setntacl(lp, file, sddl, domsid, backend=None, eadbfile=None, use_ntvfs=True, skip_invalid_chown=False, passdb=None, recursive=False):
     assert(isinstance(domsid, str) or isinstance(domsid, security.dom_sid))
     if isinstance(domsid, str):
         sid = security.dom_sid(domsid)
@@ -117,7 +117,7 @@
                     sd2 = sd
                     sd2.owner_sid = administrator
 
-                    smbd.set_nt_acl(file, security.SECINFO_OWNER |security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL, sd2)
+                    setsmbntacl(file, security.SECINFO_OWNER | security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL, sd2, recursive)
 
                     # and then set an NTVFS ACL (which does not set the posix ACL) to pretend the owner really was set
                     use_ntvfs = True
@@ -130,7 +130,7 @@
                 # This won't work in test environments, as it tries a real (rather than xattr-based fake) chown
 
                 os.chown(file, 0, 0)
-                smbd.set_nt_acl(file, security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL, sd)
+                setsmbntacl(file, security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL, sd, recursive)
 
     if use_ntvfs:
         (backend_obj, dbname) = checkset_backend(lp, backend, eadbfile)
@@ -139,19 +139,67 @@
         ntacl.info = sd
         if dbname is not None:
             try:
-                backend_obj.wrap_setxattr(dbname,
-                                          file, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+                setntvfsdbntacl(backend_obj, dbname, file, ntacl, recursive)
             except Exception:
                 # FIXME: Don't catch all exceptions, just those related to opening
                 # xattrdb
                 print "Fail to open %s" % dbname
-                samba.xattr_native.wrap_setxattr(file, xattr.XATTR_NTACL_NAME,
-                                                 ndr_pack(ntacl))
+                setntvfsntacl(file, ntacl, recursive)
         else:
-            samba.xattr_native.wrap_setxattr(file, xattr.XATTR_NTACL_NAME,
-                                             ndr_pack(ntacl))
+            setntvfsntacl(file, ntacl, recursive)
     else:
-        smbd.set_nt_acl(file, security.SECINFO_OWNER | security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL, sd)
+        setsmbntacl(file, security.SECINFO_OWNER | security.SECINFO_GROUP | security.SECINFO_DACL | security.SECINFO_SACL, sd, recursive)
+
+
+def setntvfsdbntacl(backend_obj, dbname, path, ntacl, recursive):
+    if recursive:
+        if os.path.isdir(path):
+            backend_obj.wrap_setxattr(dbname, path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+            for root, subfolders, files in os.walk(path):
+                for folder in subfolders:
+                    folder_path = os.path.join(root, folder)
+                    backend_obj.wrap_setxattr(dbname, folder_path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+                for filename in files:
+                    file_path = os.path.join(root, filename)
+                    backend_obj.wrap_setxattr(dbname, file_path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+        else:
+            raise CommandError("Recursive flag set but specified file is not a directory")
+    else:
+        backend_obj.wrap_setxattr(dbname, path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+
+
+def setntvfsntacl(path, ntacl, recursive):
+    if recursive:
+        if os.path.isdir(path):
+            samba.xattr_native.wrap_setxattr(path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+            for root, subfolders, files in os.walk(path):
+                for folder in subfolders:
+                    folder_path = os.path.join(root, folder)
+                    samba.xattr_native.wrap_setxattr(folder_path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+                for filename in files:
+                    file_path = os.path.join(root, filename)
+                    samba.xattr_native.wrap_setxattr(file_path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+        else:
+            raise CommandError("Recursive flag set but specified file is not a directory")
+    else:
+        samba.xattr_native.wrap_setxattr(path, xattr.XATTR_NTACL_NAME, ndr_pack(ntacl))
+
+
+def setsmbntacl(path, flags, sd, recursive):
+    if recursive:
+        if os.path.isdir(path):
+            smbd.set_nt_acl(path, flags, sd)
+            for root, subfolders, files in os.walk(path):
+                for folder in subfolders:
+                    folder_path = os.path.join(root, folder)
+                    smbd.set_nt_acl(folder_path, flags, sd)
+                for filename in files:
+                    file_path = os.path.join(root, filename)
+                    smbd.set_nt_acl(file_path, flags, sd)
+        else:
+            raise CommandError("Recursive flag set but specified file is not a directory")
+    else:
+        smbd.set_nt_acl(path, flags, sd)
 
 
 def ldapmask2filemask(ldm):
