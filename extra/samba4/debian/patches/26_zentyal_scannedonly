Index: samba4-4.1.0rc2/source3/modules/vfs_scannedonly.c
===================================================================
--- samba4-4.1.0rc2.orig/source3/modules/vfs_scannedonly.c	2013-09-10 20:32:44.095339059 +0200
+++ samba4-4.1.0rc2/source3/modules/vfs_scannedonly.c	2013-09-10 20:35:26.695453809 +0200
@@ -50,6 +50,7 @@
 #include "includes.h"
 #include "smbd/smbd.h"
 #include "system/filesys.h"
+#include "librpc/gen_ndr/auth.h"
 
 #include "config.h"
 
@@ -60,6 +61,12 @@
 				+ strlen((sunp)->sun_path))
 #endif
 
+struct scannedonly_DIR {
+	char *base;
+	int recheck_tries_done; /* if 0 the directory listing has not yet
+	been checked for files that need to be scanned. */
+	DIR *DIR;
+};
 
 struct Tscannedonly {
 	int socket;
@@ -82,16 +89,10 @@
 	const char *p_virus; /* prefix for virus containing files */
 	const char *p_failed; /* prefix for failed to scan files */
 	char gsendbuffer[SENDBUFFERSIZE + 1];
+	struct scannedonly_DIR *dir_data;
 };
 
 #define STRUCTSCANO(var) ((struct Tscannedonly *)var)
-
-struct scannedonly_DIR {
-	char *base;
-	int recheck_tries_done; /* if 0 the directory listing has not yet
-	been checked for files that need to be scanned. */
-	DIR *DIR;
-};
 #define SCANNEDONLY_DEBUG 9
 /*********************/
 /* utility functions */
@@ -388,21 +389,24 @@
 	       ,smb_fname->base_name,shortname,base_name));
 
 	if (ISDOT(shortname) || ISDOTDOT(shortname)) {
+        DEBUG(SCANNEDONLY_DEBUG, ("Is dot or dotdot, return true\n"));
 		return true;
 	}
 	if (is_scannedonly_file(STRUCTSCANO(handle->data), shortname)) {
 		DEBUG(SCANNEDONLY_DEBUG,
 		      ("scannedonly_allow_access, %s is a scannedonly file, "
-		       "return 0\n", shortname));
+		       "return false\n", shortname));
 		return false;
 	}
 
 	if (!VALID_STAT(smb_fname->st)) {
-		DEBUG(SCANNEDONLY_DEBUG,("stat %s\n",smb_fname->base_name));
+		DEBUG(SCANNEDONLY_DEBUG,("No valid stat (%s)\n",smb_fname->base_name));
 		retval = SMB_VFS_NEXT_STAT(handle, smb_fname);
+		DEBUG(SCANNEDONLY_DEBUG,("stat (%s) returns (%d)\n",
+            smb_fname->base_name, retval));
 		if (retval != 0) {
 			/* failed to stat this file?!? --> hide it */
-			DEBUG(SCANNEDONLY_DEBUG,("no valid stat, return"
+			DEBUG(SCANNEDONLY_DEBUG,("No valid stat, return"
 						 " allow_nonexistent=%d\n",
 						 allow_nonexistent));
 			return allow_nonexistent;
@@ -418,28 +422,31 @@
 			S_ISDIR(smb_fname->st.st_ex_mode));
 	}
 	if (smb_fname->st.st_ex_size == 0) {
-		DEBUG(SCANNEDONLY_DEBUG,("empty file, return 1\n"));
+		DEBUG(SCANNEDONLY_DEBUG,("Empty file, return true\n"));
 		return true;	/* empty files cannot contain viruses ! */
 	}
 	cachefile = cachefile_name(ctx,
 				   shortname,
 				   base_name,
 				   STRUCTSCANO(handle->data)->p_scanned);
-	cache_smb_fname = synthetic_smb_fname(ctx, cachefile,NULL,NULL);
+    DEBUG(SCANNEDONLY_DEBUG, ("Cache file name is '%s'\n", cachefile));
+	cache_smb_fname = synthetic_smb_fname(ctx, cachefile, NULL, NULL);
 	if (!VALID_STAT(cache_smb_fname->st)) {
+        DEBUG(SCANNEDONLY_DEBUG, ("No valid stat (%s)\n", cache_smb_fname->base_name));
 		retval = SMB_VFS_NEXT_STAT(handle, cache_smb_fname);
+        DEBUG(SCANNEDONLY_DEBUG, ("Stat (%s) returns (%d)\n", cache_smb_fname->base_name, retval));
 	}
 	if (retval == 0 && VALID_STAT(cache_smb_fname->st)) {
+        DEBUG(SCANNEDONLY_DEBUG, ("Checking timespec_is_newer\n"));
 		if (timespec_is_newer(&smb_fname->st.st_ex_ctime,
 				      &cache_smb_fname->st.st_ex_ctime)) {
-			talloc_free(cache_smb_fname);
+            DEBUG(SCANNEDONLY_DEBUG, ("cache file is_newer, allow access\n"));
+			TALLOC_FREE(cache_smb_fname);
 			return true;
 		}
-		/* no cachefile or too old */
-		SMB_VFS_NEXT_UNLINK(handle, cache_smb_fname);
-		retval = -1;
 	}
 
+    DEBUG(SCANNEDONLY_DEBUG, ("Notifying scanner\n"));
 	notify_scanner(handle, smb_fname->base_name);
 
 	if (loop && sDIR && sDIR->recheck_tries_done == 0) {
@@ -463,8 +470,8 @@
 						 smb_fname2,
 						 dire->d_name,
 						 base_name, 0, 0, 0, 0, 0);
-			talloc_free(fpath2);
-			talloc_free(smb_fname2);
+			TALLOC_FREE(fpath2);
+			TALLOC_FREE(smb_fname2);
 			dire = SMB_VFS_NEXT_READDIR(handle, sDIR->DIR,NULL);
 		}
 		sDIR->recheck_tries_done = 1;
@@ -477,6 +484,8 @@
 		)) {
 		int numloops = sDIR ? sDIR->recheck_tries_done : 0;
 		flush_sendbuffer(handle);
+
+        retval = -1;
 		while (retval != 0	/*&& errno == ENOENT */
 		       && numloops < recheck_tries) {
 			DEBUG(SCANNEDONLY_DEBUG,
@@ -491,6 +500,7 @@
 		if (sDIR)
 			sDIR->recheck_tries_done = numloops;
 	}
+
 	/* still no cachefile, or still too old, return 0 */
 	if (retval != 0
 	    || !timespec_is_newer(&smb_fname->st.st_ex_ctime,
@@ -511,6 +521,7 @@
 					   const char *mask, uint32 attr)
 {
 	DIR *DIRp;
+	struct Tscannedonly *data = NULL;
 	struct scannedonly_DIR *sDIR;
 
 	DIRp = SMB_VFS_NEXT_OPENDIR(handle, fname, mask, attr);
@@ -518,7 +529,11 @@
 		return NULL;
 	}
 
-	sDIR = talloc(NULL, struct scannedonly_DIR);
+	SMB_VFS_HANDLE_GET_DATA(handle, data, struct Tscannedonly,
+				return NULL);
+	sDIR = talloc(handle, struct scannedonly_DIR);
+	data->dir_data = sDIR;
+
 	if (fname[0] != '/') {
 		sDIR->base = construct_full_path(sDIR,handle, fname, true);
 	} else {
@@ -528,7 +543,8 @@
 			("scannedonly_opendir, fname=%s, base=%s\n",fname,sDIR->base));
 	sDIR->DIR = DIRp;
 	sDIR->recheck_tries_done = 0;
-	return (DIR *) sDIR;
+
+	return DIRp;
 }
 
 static DIR *scannedonly_fdopendir(vfs_handle_struct * handle,
@@ -538,6 +554,7 @@
 	DIR *DIRp;
 	struct scannedonly_DIR *sDIR;
 	const char *fname;
+	struct Tscannedonly *data = NULL;
 
 	DIRp = SMB_VFS_NEXT_FDOPENDIR(handle, fsp, mask, attr);
 	if (!DIRp) {
@@ -546,7 +563,12 @@
 
 	fname = (const char *)fsp->fsp_name->base_name;
 
-	sDIR = talloc(NULL, struct scannedonly_DIR);
+	SMB_VFS_HANDLE_GET_DATA(handle, data, struct Tscannedonly,
+				return NULL);
+
+	sDIR = talloc(handle, struct scannedonly_DIR);
+	data->dir_data = sDIR;
+
 	if (fname[0] != '/') {
 		sDIR->base = construct_full_path(sDIR,handle, fname, true);
 	} else {
@@ -556,9 +578,9 @@
 			("scannedonly_fdopendir, fname=%s, base=%s\n",fname,sDIR->base));
 	sDIR->DIR = DIRp;
 	sDIR->recheck_tries_done = 0;
-	return (DIR *) sDIR;
-}
 
+	return DIRp;
+}
 
 static struct dirent *scannedonly_readdir(vfs_handle_struct *handle,
 					      DIR * dirp,
@@ -573,8 +595,12 @@
 	struct dirent *newdirent;
 	TALLOC_CTX *ctx=talloc_tos();
 
-	struct scannedonly_DIR *sDIR = (struct scannedonly_DIR *)dirp;
-	if (!dirp) {
+	struct Tscannedonly *data = NULL;
+	struct scannedonly_DIR *sDIR = NULL;
+	SMB_VFS_HANDLE_GET_DATA(handle, data, struct Tscannedonly,
+			return NULL);
+	sDIR = data->dir_data;
+	if (!sDIR) {
 		return NULL;
 	}
 
@@ -646,35 +672,20 @@
 	return newdirent;
 }
 
-static void scannedonly_seekdir(struct vfs_handle_struct *handle,
-				DIR * dirp, long offset)
-{
-	struct scannedonly_DIR *sDIR = (struct scannedonly_DIR *)dirp;
-	SMB_VFS_NEXT_SEEKDIR(handle, sDIR->DIR, offset);
-}
-
-static long scannedonly_telldir(struct vfs_handle_struct *handle,
-				DIR * dirp)
-{
-	struct scannedonly_DIR *sDIR = (struct scannedonly_DIR *)dirp;
-	return SMB_VFS_NEXT_TELLDIR(handle, sDIR->DIR);
-}
-
-static void scannedonly_rewinddir(struct vfs_handle_struct *handle,
-				  DIR * dirp)
-{
-	struct scannedonly_DIR *sDIR = (struct scannedonly_DIR *)dirp;
-	SMB_VFS_NEXT_REWINDDIR(handle, sDIR->DIR);
-}
-
 static int scannedonly_closedir(vfs_handle_struct * handle,
 				DIR * dirp)
 {
 	int retval;
-	struct scannedonly_DIR *sDIR = (struct scannedonly_DIR *)dirp;
-	flush_sendbuffer(handle);
-	retval = SMB_VFS_NEXT_CLOSEDIR(handle, sDIR->DIR);
+	struct Tscannedonly *data = NULL;
+	struct scannedonly_DIR *sDIR = NULL;
+	SMB_VFS_HANDLE_GET_DATA(handle, data, struct Tscannedonly, NULL);
+	if (data) {
+		sDIR = data->dir_data;
+		flush_sendbuffer(handle);
+	}
+	retval = SMB_VFS_NEXT_CLOSEDIR(handle, dirp);
 	TALLOC_FREE(sDIR);
+	data->dir_data = NULL;
 	return retval;
 }
 
@@ -834,6 +845,7 @@
 static int scannedonly_unlink(vfs_handle_struct * handle,
 			      const struct smb_filename *smb_fname)
 {
+	int ret;
 	/* unlink the 'scanned' file too */
 	struct smb_filename *smb_fname_cache = NULL;
 	char * cachefile;
@@ -844,10 +856,27 @@
 		smb_fname->base_name,
 		STRUCTSCANO(handle->data)->p_scanned);
 	smb_fname_cache = synthetic_smb_fname(ctx, cachefile,NULL,NULL);
-	if (SMB_VFS_NEXT_UNLINK(handle, smb_fname_cache) != 0) {
-		DEBUG(SCANNEDONLY_DEBUG, ("_unlink: failed to unlink %s\n",
-					  smb_fname_cache->base_name));
+	ret = SMB_VFS_NEXT_STAT(handle, smb_fname_cache);
+	if (ret == 0) {
+	    if (SMB_VFS_NEXT_UNLINK(handle, smb_fname_cache) != 0) {
+			DEBUG(SCANNEDONLY_DEBUG, ("_unlink: failed to unlink %s\n",
+						smb_fname_cache->base_name));
+		}
 	}
+	/* unlink the 'failed' file too */
+	cachefile = cachefile_name_f_fullpath(
+		ctx,
+		smb_fname->base_name,
+		STRUCTSCANO(handle->data)->p_failed);
+	smb_fname_cache = synthetic_smb_fname(ctx, cachefile,NULL,NULL);
+	ret = SMB_VFS_NEXT_STAT(handle, smb_fname_cache);
+	if (ret == 0) {
+		if (SMB_VFS_NEXT_UNLINK(handle, smb_fname_cache) != 0) {
+			DEBUG(0, ("_unlink: failed to unlink %s\n",
+						smb_fname_cache->base_name));
+		}
+	}
+
 	return SMB_VFS_NEXT_UNLINK(handle, smb_fname);
 }
 
@@ -860,6 +889,7 @@
 	TALLOC_CTX *ctx = talloc_tos();
 	bool only_deletable_files = true, have_files = false;
 	char *path_w_slash;
+	int ret;
 
 	if (!STRUCTSCANO(handle->data)->rm_hidden_files_on_rmdir)
 		return SMB_VFS_NEXT_RMDIR(handle, path);
@@ -926,12 +956,45 @@
 		}
 	}
 	SMB_VFS_NEXT_CLOSEDIR(handle, dirp);
+
+	/* unlink the 'scanned' file too */
+	struct smb_filename *smb_fname_cache = NULL;
+	char *cachefile;
+	cachefile = cachefile_name_f_fullpath(
+			ctx,
+			path,
+			STRUCTSCANO(handle->data)->p_scanned);
+	smb_fname_cache = synthetic_smb_fname(ctx, cachefile, NULL,NULL);
+	ret = SMB_VFS_NEXT_STAT(handle, smb_fname_cache);
+	if (ret == 0) {
+		if (SMB_VFS_NEXT_UNLINK(handle, smb_fname_cache) != 0) {
+			DEBUG(0, ("_unlink: failed to unlink %s\n",
+						smb_fname_cache->base_name));
+		}
+	}
+	/* unlink the 'failed' file too */
+	cachefile = cachefile_name_f_fullpath(
+			ctx,
+			path,
+			STRUCTSCANO(handle->data)->p_failed);
+	smb_fname_cache = synthetic_smb_fname(ctx, cachefile, NULL,NULL);
+	ret = SMB_VFS_NEXT_STAT(handle, smb_fname_cache);
+	if (ret == 0) {
+		if (SMB_VFS_NEXT_UNLINK(handle, smb_fname_cache) != 0) {
+			DEBUG(0, ("_unlink: failed to unlink %s\n",
+						smb_fname_cache->base_name));
+		}
+	}
+
 	return SMB_VFS_NEXT_RMDIR(handle, path);
 }
 
-static void free_scannedonly_data(void **data)
+static void free_scannedonly_data(void **datap)
 {
-	SAFE_FREE(*data);
+	struct Tscannedonly **data = (struct Tscannedonly **)datap;
+	if (!data)
+		return;
+	TALLOC_FREE(*data);
 }
 
 static int scannedonly_connect(struct vfs_handle_struct *handle,
@@ -940,13 +1003,16 @@
 
 	struct Tscannedonly *so;
 
-	so = SMB_MALLOC_P(struct Tscannedonly);
+	so = talloc_zero(NULL, struct Tscannedonly);
 	if (so == NULL) {
+		SMB_VFS_NEXT_DISCONNECT(handle);
 		errno = ENOMEM;
 		return -1;
 	}
-	handle->data = (void *)so;
-	handle->free_data = free_scannedonly_data;
+	SMB_VFS_HANDLE_SET_DATA(handle, so, free_scannedonly_data,
+				struct Tscannedonly, return -1);
+
+	so->dir_data = NULL;
 	so->gsendbuffer[0]='\0';
 	so->domain_socket =
 		lp_parm_bool(SNUM(handle->conn), "scannedonly",
@@ -1020,9 +1086,6 @@
 	.opendir_fn = scannedonly_opendir,
 	.fdopendir_fn = scannedonly_fdopendir,
 	.readdir_fn = scannedonly_readdir,
-	.seekdir_fn = scannedonly_seekdir,
-	.telldir_fn = scannedonly_telldir,
-	.rewind_dir_fn = scannedonly_rewinddir,
 	.closedir_fn = scannedonly_closedir,
 	.rmdir_fn = scannedonly_rmdir,
 	.stat_fn = scannedonly_stat,
