#!/usr/bin/perl -w

# Copyright (C) 2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Daemon to consolidate and send report data to Zentyal Remote

use EBox;
use EBox::Config;
use Getopt::Long;
use File::Slurp;
use Log::Log4perl;

# Constants
use constant INTERVAL => 5 * 60;

# Daemonisation is done by upstart.
# Follow Stevens chapter 13 coding rules if no upstart is available

# Procedure: _startUp
#
#     Start up tasks
#
#      * Logging init
#
sub _startUp
{
    # FIXME: Do this in EBox.pm
    # Init again logger to open the new descriptor
    Log::Log4perl->init(EBox::Config::conf() . '/eboxlog.conf');
}

# Procedure: _mainLoop
#
#      Run reporting consolidation and send the data to Zentyal Remote
#      every $interval time
#
# Parameters:
#
#      interval - Int the interval between consolidations in seconds
#
sub _mainLoop
{
    my ($interval) = @_;

    my $logFile = EBox::Config::conf() . 'remoteservices/reporter/sent.stamp';
    if ( -r $logFile ) {
        my $stamp = File::Slurp::read_file($logFile);
        if (time() - $stamp < $interval) {
            # Wait until $stamp + $interval time is done
            sleep($stamp + $interval - time());
        }
    }

    while (1) {
        my $pid = fork();
        if ( $pid < 0 ) {
            EBox::error("Cannot fork: $!");
            die "Cannot fork: $!";
        } elsif ( $pid == 0 ) {
            # Child code
            require EBox::Global;
            require EBox::RemoteServices::Reporter;
            unless ( EBox::Config::boolean('disable_consolidation') ) {
                my $rs = EBox::Global->getInstance()->modInstance('remoteservices');
                if ( $rs->reportEnabled() ) {
                    my $reporter = EBox::RemoteServices::Reporter->instance();
                    $reporter->consolidate();
                    $reporter->send();
                }
            }
            exit(0);
        } else {
            # Parent code
            waitpid($pid, 0);
        }
        # Note down when last report data was sent
        File::Slurp::write_file($logFile, time());
        sleep($interval);
    }
}

#######
# MAIN
#######

# Get arguments
my ($usage) = (0);
my $correct = GetOptions(
    'usage|help' => \$usage
   );

if ( $usage or (not $correct)) {
    pod2usage(1);
}

EBox::init();

_startUp();

_mainLoop(INTERVAL);

1;

__END__

=head1 NAME

reporterd - Daemon intended to consolidate and report data to Zentyal Remote

=head1 SYNOPSIS

reporterd [--usage|help]

 Options:
    --usage|help  Print this help and exit

=cut
