<%args>
@iflist
$networkMod
</%args>
<%init>
use EBox::Config;
my $hasEthernets = 0;
my $hasBonds = 0;
my $hasBridges = 0;
my $hasVlans = 0;
foreach my $iface (@iflist) {
    if ($networkMod->ifaceIsBond($iface)) {
        $hasBonds = 1;
    }
    if ($networkMod->ifaceIsBridge($iface)) {
        $hasBridges = 1;
    }
    my $method = $networkMod->ifaceMethod($iface);
    if ($method eq 'static' or $method eq 'dhcp') {
        $hasEthernets = 1;
    }
}

my @autoIfaces;
push @autoIfaces, grep {
        my $ifMethod = $networkMod->ifaceMethod($_);
            ($ifMethod eq 'bundled')
   } @iflist;
push @autoIfaces, grep {
        my $ifMethod = $networkMod->ifaceMethod($_);
        ($ifMethod eq 'static') or
            ($ifMethod eq 'dhcp') or
            ($ifMethod eq 'bridged') or
            (($ifMethod eq 'trunk') and ($networkMod->ifaceIsBond($_)))
   } @iflist;
</%init>
network:
  version: 2
  renderer: NetworkManager
% if ($hasEthernets) {
  ethernets:
% }
% foreach my $iface (@iflist) {
%   my $method = $networkMod->ifaceMethod($iface);
%   next if $method eq 'trunk' or $networkMod->ifaceIsBridge($iface) or $networkMod->ifaceIsBond($iface);
%   if ($method eq 'static' or $method eq 'dhcp') {
%     my $dns = $networkMod->model('DNSResolver')->nameservers();
    <% $iface %>:
%     if ($method eq 'dhcp') {
      dhcp4: true
%     } else {
      dhcp4: false
      addresses: [ "<% $networkMod->ifaceAddress($iface) %>/<% EBox::NetWrappers::bits_from_mask($networkMod->ifaceNetmask($iface)) %>" ]
%       if (@$dns) {
      nameservers:
%         if ($networkMod->searchdomain()) {
        search:
            - "<% $networkMod->searchdomain() %>"
%         }
        addresses: [ <% join ', ', @$dns %> ]
%       }
%     my @gatewayInfo = $networkMod->ifaceGateways($iface);
%       if (@gatewayInfo) {
      routes:
%         foreach my $gw (@gatewayInfo) {
%           if ($gw->{default}) {
        - to: 'default'
%           } else {
        - to: 0.0.0.0/0
%           }
          via: <% $gw->{ip} %>
          metric: <% $gw->{weight} %>
          on-link: true
%         }
%       }
%     }
%     my $mtu = EBox::Config::configkey("mtu_$iface");
%     if ($mtu) {
      mtu: <% $mtu %>
%     }
%   }
%   if ($method eq 'bundled') {
    <% $iface %>:
      dhcp4: false
      dhcp6: false     
%   }
% }
% if ($hasBridges) {
  bridges:
% }
% foreach my $iface (@iflist) {
%   if ($networkMod->ifaceIsBridge($iface)) {
    <% $iface %>:
      interfaces: [ <% join ', ', @{$networkMod->bridgeIfaces($iface)} %> ]
%     if($networkMod->ifaceMethod($iface) eq 'dhcp') {
      dhcp4: yes
      dhcp6: no
%     } else {
      dhcp4: no
      dhcp6: no
      addresses: [ "<% $networkMod->ifaceAddress($iface) %>/<% EBox::NetWrappers::bits_from_mask($networkMod->ifaceNetmask($iface)) %>" ]
%     }
      macaddress: "<% EBox::NetWrappers::iface_mac_address($iface) %>"
      parameters:
        stp: false
        forward-delay: 5
%   }
% }

% if ($hasBonds) {
  bonds:
% }
% foreach my $iface (@iflist) {
%   if ($networkMod->ifaceIsBond($iface)) {
    <% $iface %>:
%     if($networkMod->ifaceMethod($iface) eq 'dhcp') {
      dhcp4: true
      dhcp6: false
%     } else {
      dhcp4: false
      dhcp6: false
      addresses: [ "<% $networkMod->ifaceAddress($iface) %>/<% EBox::NetWrappers::bits_from_mask($networkMod->ifaceNetmask($iface)) %>" ]
%     }
      interfaces: [ <% join ', ', @{$networkMod->bondIfaces($iface)} %> ]
      parameters:
        mode: <% $networkMod->bondMode($iface) %>
        up-delay: 200
        down-delay: 200
        # fail-over-mac-policy: active TODO
%   }
% }