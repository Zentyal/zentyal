<%args>
    $persistentVolumeName
    $containerName
    $adminPort
</%args>
#!/bin/bash

# Debug
# set -x

LABEL='"com.zentyal.manage=true"'
VOLUMEN_NAME='<% $persistentVolumeName %>'
CONTAINER_NAME='<% $containerName %>'
PORT='<% $adminPort %>'

####
## Functions
####

get_status() {
    GET_VOLUMEN=$(docker volume ls -q -f name=$VOLUMEN_NAME)
    GET_CONTAINER=$(docker ps -a --filter name=$CONTAINER_NAME --format "{{.Names}}")

    if [[ -z "$GET_VOLUMEN" ]] || [[ -z "$GET_CONTAINER" ]]; then
        return 1
    else
        ## All up and running
        return 0
    fi
}


check_volumen_exists() {
    if [[ $(docker volume ls -q -f name=$VOLUMEN_NAME) != "$VOLUMEN_NAME" ]]; then
        return 0
    else
        ## Volumen exists
        return 1
    fi
}


check_container_exists() {
    if [[ $(docker ps -a --filter name=$CONTAINER_NAME --format "{{.Names}}") != "$CONTAINER_NAME" ]]; then
        return 0
    else
        ## Container exists
        return 1
    fi
}


check_container_running() {
    if [[ $(docker ps --filter name=$CONTAINER_NAME --format "{{.Names}}") != "$CONTAINER_NAME" ]]; then
        return 0
    else
        ## Container is running
        return 1
    fi
}


check_container_created_status() {
    if ! docker ps -a --filter name=$CONTAINER_NAME --format "{{.Status}}" | egrep -qo '^Created$'; then
        return 0
    else
        ## Container does not have the Created state
        return 1
    fi
}

create_volumen() {
    docker volume create \
        --label "$LABEL" \
        $VOLUMEN_NAME
}


create_container() {
    docker run \
        -d \
        -p 8000:8000 \
        -p $PORT:9443 \
        --name $CONTAINER_NAME \
        --hostname $CONTAINER_NAME \
        --restart=always \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $VOLUMEN_NAME:/data \
         --label "$LABEL" \
        portainer/portainer-ce:latest
}


start_container() {
    docker start $CONTAINER_NAME
}


stop_container() {
    docker stop $CONTAINER_NAME
}


restart_container() {
    docker restart $CONTAINER_NAME
}


destroy_volumen() {
    docker volume rm -f $VOLUMEN_NAME
}


destroy_container() {
    docker rm -f $CONTAINER_NAME
}


uninstall_container() {
    docker rm -f $CONTAINER_NAME
    docker volume rm $VOLUMEN_NAME
    docker rmi portainer/portainer-ce:latest
}


case $1 in
    "install"|"create")
        check_volumen_exists
        if [ $? -eq 1 ]; then destroy_volumen; fi
        create_volumen

        check_container_exists
        if [ $? -eq 1 ]; then destroy_container; fi
        create_container
        get_status
        ;;
    "create_container")
        create_container
        ;;
    "start")
        check_container_running
        if [ $? -eq 1 ]; then echo "ERROR: THE CONTAINER IS ALREADY RUNNING" && exit 1; fi
        start_container
        get_status
        ;;
    "stop")
        check_container_running
        if [ $? -eq 0 ]; then echo "ERROR: THE CONTAINER IS NOT RUNNING" && exit 1; fi
        stop_container
        get_status
        ;;
    "restart")
        check_container_exists
        if [ $? -eq 0 ]; then echo "ERROR: THE CONTAINER CANNOT BE RESTARTED BECAUSE DOESN'T EXIST" && exit 1; fi
        restart_container
        get_status
        ;;
    "check_volumen")
        check_volumen_exists
        ;;
    "check_container_exists")
        check_container_exists
        ;;
    "check_container_is_running")
        check_container_running
        ;;
  "destroy")
        destroy_container
        destroy_volumen
        ;;
  "uninstall")
        uninstall_container
        ;;
  *)
    echo "Invalid action, valid actions are: install, create, stop, uninstall."
    exit 1
    ;;
esac