#!/usr/bin/perl

# Copyright (C) 2012-2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Config;
use EBox::Global;
use Error qw(:try);

use Time::gmtime;
use File::Slurp;

sub getTimestamp
{
    my $time = gmtime();
    my $timestamp = sprintf("%04d%02d%02d%02d%02d%02d",
        $time->year + 1900, $time->mon + 1, $time->mday,
        $time->hour, $time->min, $time->sec);
    return $timestamp;
}

EBox::init();

my $sambaTimestampFile = EBox::Config::home() . '.s4sync_ts';
unless (-f $sambaTimestampFile) {
    write_file($sambaTimestampFile, '0');
}

my $ro = 1;
my $global = EBox::Global->getInstance($ro);
my $sambaModule = $global->modInstance('samba');
my $usersModule = $global->modInstance('users');

my $usersOU    = $usersModule->userClass()->defaultContainer($ro);
my $groupsOU   = $usersModule->groupClass()->defaultContainer($ro);
my $contactsOU = $usersModule->contactClass()->defaultContainer($ro);

my $ldb = $sambaModule->ldb();

my $ldapBaseDN = $usersModule->ldap()->dn();
my $ldbBaseDN  =  $ldb->dn();

my %ignoreOUs = map {( $_ => $_)} qw(ou=Users ou=Groups ou=Computers ou=Kerberos ou=postfix ou=mailalias,ou=postfix ou=vdomains,ou=postfix);

while (1) {
    # Sleeping at the loop start gives time to samba daemon to fully start
    sleep (30);
    next unless ($sambaModule->isEnabled() and $sambaModule->getProvision->isProvisioned());

    my $sambaTimestamp = read_file($sambaTimestampFile);


    my %sambaUsers = map { $_->get('samAccountName') => $_ } @{$ldb->users()};
    my %sambaContacts = map { $_->get('name') => $_ } @{$ldb->contacts()};
    my %sambaGroups = map { $_->get('samAccountName') => $_ } @{$ldb->groups()};
    my @orderSambaOUs;
    my %sambaOUs;
    foreach my $ou ( EBox::Samba::OU->orderOUList($ldb->ous()) ) {
        my $rDn = $ou->relativeDn($ldbBaseDN);
        if (exists $ignoreOUs{$rDn}) {
            next;
        }
        push @orderSambaOUs, $rDn;
        $sambaOUs{$rDn} = $rDn;
    }

    write_file($sambaTimestampFile, getTimestamp());

    my %zentyalUsers = map { $_->get('uid') => $_ } @{$usersModule->users()};
    my %zentyalContacts = map { $_->get('cn') => $_ } @{$usersModule->contacts()};
    my %zentyalGroups = map { $_->get('cn') => $_ } @{$usersModule->groups()};
    my %zentyalOUs    = map { my $ou = $_; ($ou->relativeDn($ldapBaseDN) => $ou) } @{ $usersModule->ous() };
    foreach my $ignored (keys %ignoreOUs) {
        delete $zentyalOUs{$ignored};
    }

    foreach my $rDN (@orderSambaOUs) {
        EBox::debug("sync OU $rDN?");
        my $ou = $sambaOUs{$rDN};
        my $inZentyal = delete $zentyalOUs{$rDN};
        if ($inZentyal) {
            EBox::debug("already in zentyal $rDN?");
            my $changed = $ou->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestampFile) {
                try {
                    $ou->updateZentyal($rDN);
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating OU $rDN: $error. s4sync will try again in next synchronization");
                };
            }
        } else {
            EBox::debug("addToZentyal $rDN?");
            try {
                $ou->addToZentyal($rDN);
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding OU $rDN: $error. s4sync will try again in next synchronization");
            };
        }
    }

    my @orderZentyalOus = reverse @{ EBox::Samba::OU->orderOUList([values %zentyalOUs]) };
    foreach my $ou (@orderZentyalOus) {
        EBox::debug("Deleting Zentyal OU '" . $ou->dn() . "'");
        $ou->deleteObject();
    }

    #################################################
    #### Sync users
    #################################################
    # Add users that exists in samba but not in Zentyal
    foreach my $sambaUserName (sort keys %sambaUsers) {
        if (exists $zentyalUsers{$sambaUserName}) {
            my $changed = $sambaUsers{$sambaUserName}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaUsers{$sambaUserName}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating user $sambaUserName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalUsers{$sambaUserName};
        } else {
            if ($sambaUsers{$sambaUserName}->isAccountEnabled() or EBox::Config::boolean('sync_disabled_users')) {
                try {
                    $sambaUsers{$sambaUserName}->addToZentyal($usersOU);
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error adding user $sambaUserName: $error. s4sync will try again in next synchronization");
                };
            }
        }
    }

    foreach my $zentyalUserName (sort keys %zentyalUsers) {
        EBox::debug("Deleting Zentyal user '$zentyalUserName'");
        $zentyalUsers{$zentyalUserName}->setIgnoredModules(['samba']);
        $zentyalUsers{$zentyalUserName}->deleteObject();
    }

    #################################################
    #### Sync contacts
    #################################################
    # Add contacts that exists in samba but not in Zentyal
    foreach my $sambaContactName (sort keys %sambaContacts) {
        if (exists $zentyalContacts{$sambaContactName}) {
            my $changed = $sambaContacts{$sambaContactName}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaContacts{$sambaContactName}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating contact $sambaContactName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalContacts{$sambaContactName};
        } else {
            try {
                $sambaContacts{$sambaContactName}->addToZentyal($contactsOU);
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding contact $sambaContactName: $error. s4sync will try again in next synchronization");
            };
        }
    }

    foreach my $zentyalContactName (sort keys %zentyalContacts) {
        EBox::debug("Deleting Zentyal contact '$zentyalContactName'");
        $zentyalContacts{$zentyalContactName}->setIgnoredModules(['samba']);
        $zentyalContacts{$zentyalContactName}->deleteObject();
    }

    #################################################
    #### Sync groups
    #################################################
    foreach my $sambaGroupName (sort keys %sambaGroups) {
        if (exists $zentyalGroups{$sambaGroupName}) {
            my $changed = $sambaGroups{$sambaGroupName}->get('whenChanged');
            $changed =~ s/\.\d+Z//;
            if ($changed > $sambaTimestamp) {
                try {
                    $sambaGroups{$sambaGroupName}->updateZentyal();
                } otherwise {
                    my ($error) = @_;
                    EBox::error("Error updating group $sambaGroupName: $error. s4sync will try again in next synchronization");
                };
            }
            delete $zentyalGroups{$sambaGroupName};
        } else {
            try {
                $sambaGroups{$sambaGroupName}->addToZentyal($groupsOU);
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding group $sambaGroupName: $error. s4sync will try again in next synchronization");
            };
        }
    }

    foreach my $zentyalGroupName (sort keys %zentyalGroups) {
        EBox::debug("Deleting Zentyal group '$zentyalGroupName'");
        $zentyalGroups{$zentyalGroupName}->setIgnoredModules(['samba']);
        $zentyalGroups{$zentyalGroupName}->deleteObject();
    }
}
