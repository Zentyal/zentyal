#!/bin/bash

####
## GLOBAL VARIABLES
####

SOURCES=/etc/apt/sources.list
UPGRADE_FILE=/var/lib/zentyal/.upgrade-finished

CURCODE=$(lsb_release -c | awk '{print $2}')
DSTCODE='focal'

CURMAJORV=$(dpkg -l|grep zentyal-core | awk '{print $3}' | cut -d'.' -f1)
CURMINORV=$(dpkg -l|grep zentyal-core | awk '{print $3}' | cut -d'.' -f2)
DESTMAJOR=$(wget --quiet -O - http://update.zentyal.org/update-from-${CURMAJORV}.${CURMINORV}.txt|cut -d'.' -f1)
DESTMINOR=$(wget --quiet -O - http://update.zentyal.org/update-from-${CURMAJORV}.${CURMINORV}.txt|cut -d'.' -f2)
CURRV="${CURMAJORV}.${CURMINORV}"
DESTV="${DESTMAJOR}.${DESTMINOR}"

ZEN_KEYS_URL="
https://keys.zentyal.org/zentyal-${DESTV}-packages-org.asc
https://keys.zentyal.org/zentyal-${DESTV}-packages-com.asc
"
IPS_KEY_ID='D7F87B2966EB736F'

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'
BOLD=$(tput bold)
NORM=$(tput sgr0)

####
## FUNCTIONS
####

function help
{
    echo -e "\nFor a Commercial edition, the script must be run as follows:"
    echo -e "\tbash release-upgrade XXXXX-XXXXX-XXXXX-XXXXX"; echo
    echo "To run the upgrade using the debug mode: bash -x release-upgrade XXXXX-XXXXX-XXXXX-XXXXX"
}


function checkZentyalVersion
{
    echo -e "${GREEN} - Checking the version of Zentyal...${NC}"

    if [ $CURMAJORV -gt $DESTMAJOR ];
    then
        echo -e "${YELLOW}${BOLD}   Your Zentyal server is already up-to-date, nothing to do.${NC}${NORM}"
        exit 120
    elif  [ $DESTMAJOR -gt $CURMAJORV ]
    then
        echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
    else
        if [ $CURMINORV -gt $DESTMINOR ] || [ $CURMINORV -eq $DESTMINOR ];
        then
            echo -e "${YELLOW}${BOLD}   Your Zentyal server is already up-to-date, nothing to do.${NC}${NORM}"
            exit 120
        fi
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkUbuntuVersion
{
    echo -e "${GREEN} - Checking the version of Ubuntu...${NC}"

    if [ $CURCODE != $DSTCODE ];
    then
        echo -e "${RED}${BOLD}   Your system is running an unsupported Ubuntu version for the upgrade${NC}${NORM}"
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkZentyalLicense
{
    echo -e "${GREEN} - Checking the license code...${NC}"

    if ! [[ "${LK}" =~ ^[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}$ ]]; then
        echo -e "${RED}${BOLD}   The license key is invalid, the format must be: XXXXX-XXXXX-XXXXX-XXXXX ${NC}${NORM}"
        help
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkIfCommercial
{
    echo -e "${GREEN} - Checking if the server is a Commercial edition...${NC}"

    if [ -f '/var/lib/zentyal/.commercial-edition' ] && [ -s '/var/lib/zentyal/.license' ];
    then
        if [ -z $LK ]
        then
            echo -e "${RED}${BOLD}   Your Zentyal is a commercial edition so you must pass as an argument a valid Zentyal $DESTV license${NC}${NORM}"
            help
            exit 130
        fi
    else
        echo -e "${YELLOW}   Zentyal Development edition${NC}"
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkInternetAccess
{
    echo -e "${GREEN} - Checking if there external DNS resolution...${NC}"

    wget -T 15 -q --spider https://google.com

    if [ $? -ne 0 ]; then
        echo -e "${RED}${BOLD}   Your server does not have external DNS resolution...${NC}${NORM}"
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkDiskSpace
{
    echo -e "${GREEN} - Checking for available disk space...${NC}"

    if [ $(df /boot | tail -1 | awk '{print $4}') -lt 51200 ];
    then
        echo "${RED} Upgrade cannot be performed due to low disk space (less than 50MB available on /boot)${NC}"
        exit 130
    fi

    for i in / /var
    do
        if [ $(df $i | tail -1 | awk '{print $4}') -lt 358400 ];
        then
            echo -e "${RED} pgrade cannot be performed due to low disk space (less than 350MB available on $i)${NC}"
            exit 130
        fi
    done

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkRepositoriesAccess
{
    echo -e "${GREEN} - Checking if the server has any issue with the repositories...${NC}"

    if apt update 2>&1 | grep -q '^[WE]:'; then
        echo -e "${RED} There are errors in the repositories access...${NC}"
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkPendingPackages
{

    echo -e "${GREEN} - Checking for pending updates...${NC}"

    IFS=';' read updates security_updates < <(/usr/lib/update-notifier/apt-check 2>&1)
    if (( $updates == 0 )) && (( $security_updates == 0 )); then
        echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
    else
        echo -e "${RED} There are $updates updates available and $security_updates security updates available, please, install them before to upgrade your system${NC}"
        exit 130
    fi
}


function GetPackageStatus
{
    echo -e "${YELLOW}   Getting the status of Zentyal packages...${NC}"

    pkgs=$(dpkg -l | egrep -v '^(ii|rc|hi)' | egrep '^[A-Za-z]{2} ' | wc -l)

    echo -e "${YELLOW}${BOLD}   ...OK${NC}${NORM}"
}


function repairPkgs
{
    echo -e "${YELLOW} - Trying to fix the broken packages...${NC}"

    if [[ $(systemctl is-active redis) != 'active' ]]
    then
        systemctl restart redis
    fi

    echo -e "${YELLOW} - Attempt 1...${NC}"

    for i in {1..10}
    do
        export DEBIAN_FRONTEND=noninteractive
        dpkg --configure -a
    done

    GetPackageStatus

    if [[ $pkgs -gt 0 ]]
    then
        echo -e "${YELLOW} - Still broken, attempt 2...${NC}"

        counter=0;
        pkg_names=$(dpkg -l | egrep -v '^(ii|rc|hi)' | egrep '^[A-Za-z]{2} ')
        while [[ $pkgs ]] && [[ $counter < 10 ]];
        do
            for i in $pkg_names
            do
                echo "${YELLOW} - Trying to fix package name '$i'...${NC}"
                export DEBIAN_FRONTEND=noninteractive
                dpkg --configure $i

                echo -e "${YELLOW} - Current broken packages...${NC}"
                dpkg -l | egrep -v '^(ii|rc|hi)' | egrep '^[A-Za-z]{2} '

                sleep 1
            done
            ((counter++))
        done;

        ## Last check
        GetPackageStatus

        if [[ $pkgs -gt 0 ]]
        then
            echo -e "${RED}    The broken packages could not be fixed...${NC}"
            exit 130
        fi
    fi

    echo -e "${GREEN} - The broken packages were fixed...${NC}"
}


function checkBrokenPackages
{
    echo -e "${GREEN} - Checking for broken packages...${NC}"

    GetPackageStatus

    if [[ $pkgs -gt 0 ]]
    then
        echo -e "${RED} - You have $pkgs broken packages...${NC}"
        repairPkgs
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkUbuntuRepositories
{
    echo -e "${GREEN} - Checking Ubuntu repositories...${NC}"

    if [[ $(egrep "^deb.*archive.ubuntu.com/ubuntu/ ($DSTCODE|$DSTCODE-updates) main" $SOURCES | wc -l) -ne 2 ]]
    then
        echo -e "${RED} The Ubuntu repository components '$DSTCODE' and/or '$DSTCODE-updates' are not defined in $SOURCES, so the upgrade cannot be done${NC}"
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function checkGPG
{
    echo -e "${GREEN} - Checking if gnupg package is installed...${NC}"

    dpkg -s gnupg &> /dev/null
    if [ $? -eq 0 ];
    then
        echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
    else
        echo -e "${YELLOW}   Package is NOT installed! Trying to install it...${NC}"
        apt install gnupg -y
    fi
}


function checkMysqlStatus
{
    echo -e "${GREEN} - Checking MySQL status...${NC}"

    if [[ $(systemctl is-active mysql) != 'active' ]]
    then
        echo -e "${RED} - MySQL server is not running...${NC}";echo
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function cleanPreviousUpgrade
{
    echo -e "${GREEN} - Cleaning upgrade file if exists...${NC}"

    if [ -f $UPGRADE_FILE ]
    then
        rm -f $UPGRADE_FILE
    fi
    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function prepareUpgrade
{
    checkZentyalVersion
    checkUbuntuVersion
    checkIfCommercial
    checkInternetAccess
    checkDiskSpace
    checkRepositoriesAccess
    checkPendingPackages
    checkBrokenPackages
    checkUbuntuRepositories
    checkGPG
    checkMysqlStatus
    cleanPreviousUpgrade
}


function getIDSRepositoryKey
{
    echo -e "${GREEN} - Getting the repository key for IDS module...${NC}"

    gpg --keyserver keyserver.ubuntu.com --recv-keys ${IPS_KEY_ID}
    gpg --export ${IPS_KEY_ID} > /etc/apt/trusted.gpg.d/suricata.gpg
    gpg --batch --yes --delete-keys ${IPS_KEY_ID}

    if [ -f '/etc/apt/trusted.gpg.d/suricata.gpg' ] && [ $(stat -c %s /etc/apt/trusted.gpg.d/suricata.gpg) -lt 340 ]
    then
        echo -e "${RED} - The IDS key could not download correctly...${NC}";echo
        exit 130
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function getZentyalRepositoryKeys
{
    echo -e "${GREEN} - Getting the repository keys...${NC}"

    for i in ${ZEN_KEYS_URL}; do
        fname=$(basename $i)
        if [[ -f "/etc/apt/trusted.gpg.d/$fname" ]]
        then
            rm -f /etc/apt/trusted.gpg.d/$fname
        fi

        echo -e "${YELLOW}   Downloading $i ...${NC}"
        wget -q ${i} -P /etc/apt/trusted.gpg.d/
    done

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function prepareIDSRepositories
{
    echo -e "${GREEN} - Setting up IDS repository...${NC}"

    sed -i '/suricata-stable\/ubuntu/d' /etc/apt/sources.list
    echo "deb [signed-by=/etc/apt/trusted.gpg.d/suricata.gpg] http://ppa.launchpad.net/oisf/suricata-stable/ubuntu $DSTCODE main" > /etc/apt/sources.list.d/ips.list

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo

    checkRepositoriesAccess
}


function lkActivation
{
    echo -e "${GREEN} - Activating the LK for $DESTV...${NC}"

    cp -p /usr/share/zentyal/enable_license /var/lib/zentyal/tmp/
    sed -i "s/^SERVER_VERSION=.*/SERVER_VERSION='$DESTV'/g" /usr/share/zentyal/enable_license

    if /usr/share/zentyal/enable_license ${LK};
    then
        echo -e "${GREEN}${BOLD} - License key activated...${NC}"
    else
        echo -e "${RED}${BOLD}   The license key validation fail...${NC}${NORM}"
        exit 130
    fi

    mv /var/lib/zentyal/tmp/enable_license /usr/share/zentyal/

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function prepareZentyalRepository
{
    echo -e "${GREEN} - Setting up Zentyal repository...${NC}"

    if [[ -n $COMMERCIAL ]]
    then
        echo -e "${YELLOW}   For Commercial...${NC}"

        sed -i '/packages.zentyal/d' /etc/apt/sources.list
        echo "deb [signed-by=/etc/apt/trusted.gpg.d/zentyal-$DESTV-packages-com.asc] https://packages.zentyal.com/zentyal-qa $DESTV main extra" > /etc/apt/sources.list.d/zentyal-qa.list
        lkActivation
    else
        echo -e "${YELLOW}   For Development...${NC}"
        if [ -f '/etc/apt/sources.list.d/zentyal-qa' ]
        then
            rm -f /etc/apt/sources.list.d/zentyal-qa
        fi

        sed -i '/packages.zentyal/d' /etc/apt/sources.list
        echo "deb [signed-by=/etc/apt/trusted.gpg.d/zentyal-$DESTV-packages-org.asc] https://packages.zentyal.org/zentyal $DESTV main extra" > /etc/apt/sources.list.d/zentyal.list
    fi

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo

    checkRepositoriesAccess

}


function upgrade_zentyal
{
    echo -e "${GREEN} - Upgrading Zentyal...${NC}"

    for log in /var/log/zentyal/zentyal.log /var/log/dpkg.log /var/log/syslog
    do
        echo "## DEBUG - Zentyal upgrade START from ${CURMAJORV}.${CURMINORV} to ${DESTMAJOR}.${DESTMINOR}" >> $log
    done

    echo -e "${YELLOW} - The status of each Zentyal package before the upgrade is...${NC}"
    dpkg -l | egrep 'zen(buntu|tyal)-'


    export DEBIAN_FRONTEND=noninteractive
    apt dist-upgrade -y -o DPkg::Options::="--force-overwrite" -o DPkg::Options::="--force-confdef"

    checkBrokenPackages

    echo -e "${YELLOW} - The status of each Zentyal package after the upgrade is...${NC}"
    dpkg -l | egrep 'zen(buntu|tyal)-'

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


function postUpgradeProcedure
{
    echo -e "${GREEN} - Post-configuration process...${NC}"

    # Purge all no longer needed running services
    dpkg -l | grep 'zentyal-' | cut -d' ' -f3 | xargs apt-mark manual
    apt autoremove --purge -y -o DPkg::Options::="--force-confdef"
    dpkg --configure -a --force-confdef
    apt -f install -y -o DPkg::Options::="--force-confdef"
    checkBrokenPackages

    sleep 2
    apt clean
    pkill -f upgrade-log-server

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}"
}


function forceZentyalLXDM
{
    echo -e "${GREEN}${BOLD} - Configuring Zentyal LXDM...${NC}${NORM}";echo

    systemctl disable lxdm
    systemctl enable zentyal.lxdm

    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}"
}


function finishUpgrade
{
    echo -e "${GREEN}${BOLD} - Finishing the upgrade...${NC}${NORM}";echo

    if dpkg --configure -a --force-confdef
    then
        forceZentyalLXDM
        postUpgradeProcedure
    else
        echo -e "${RED}${BOLD}   Zentyal upgrade failed. Full log at:\n\t/var/log/zentyal/upgrade.log\n\t/var/log/zentyal/zentyal.log\n\t/var/log/zentyal/software.log\n\t/var/log/syslog .${NC}${NORM}"
    fi

    sleep 2
    apt clean

    touch $UPGRADE_FILE

    for log in /var/log/zentyal/zentyal.log /var/log/dpkg.log /var/log/syslog
    do
        echo "## DEBUG - Zentyal upgrade END from ${CURMAJORV}.${CURMINORV} to ${DESTMAJOR}.${DESTMINOR}" >> $log
    done

    echo; echo -e "${YELLOW}${BOLD}   Zentyal upgrade finished! Please restart your server now.${NC}${NORM}"
    echo -e "${GREEN}${BOLD}...OK${NC}${NORM}";echo
}


####
## Calls
####

echo; echo -e "${GREEN} Doing some initial checks...${NC}"; echo

## Set license key variable if an argument was passed
if [[ $# -eq 1 ]]
then
    LK=${1}
    checkZentyalLicense
fi
prepareUpgrade

echo; echo -e "${GREEN} Preparing the Zentyal upgrade from ${CURMAJORV}.${CURMINORV} to ${DESTMAJOR}.${DESTMINOR}...${NC}"; echo
getIDSRepositoryKey
getZentyalRepositoryKeys
prepareIDSRepositories
prepareZentyalRepository

echo; echo -e "${GREEN} Upgrading Zentyal from ${CURMAJORV}.${CURMINORV} to ${DESTMAJOR}.${DESTMINOR}...${NC}"; echo
upgrade_zentyal

echo; echo -e "${GREEN} Running post-upgrade tasks...${NC}"; echo
finishUpgrade
