<%flags>
  inherit => '/ajax/modelViewer.mas'
</%flags>
<%args>
  $model
  $action => 'view'
  $editid => ''
  $hasChanged => 1
  $filter => ''
  $page => 0
  $tpages => 0
  %presetParams => ()
</%args>
<%init>
use EBox::Gettext;
use EBox::Model::DataTable;
use POSIX;
use Perl6::Junction qw(any);
</%init>
<& PARENT:view,
   model      => $model,
   hasChanged => $hasChanged,
   action     => $action,
&>


<%doc>
  Method: _body

     Set the model viewer body. Check the overridden method very
     carefully.

  Overrides:

     /ajax/modelViewer.mas:_body

</%doc>
<%method _body>
<%args>
  $model
  $action => 'view'
  $editid => ''
  $hasChanged => 1
  $filter => ''
  $page => 0
  $tpages => 0
  %presetParams => ()
</%args>
<%init>
  use EBox::Gettext;

  # Fetch table head from model
  my $table     = $model->table();
  my @tableHead = @{$table->{'tableDescription'}};
  # Pointer to different values for convenience
  my $actions = $table->{'actions'};
  my $changeView = $model->action('changeView');
  my $printableRowName = $table->{'printableRowName'};
  my $tableName = $table->{'tableName'};
  my $printableTableName = $table->{'printableTableName'};
  my $onlyCustomActions = $table->{'onlyCustomActions'};
  my $withoutActions = $table->{'withoutActions'};

  my $movableRows;
  my $adaptedFilter;
  if (defined $filter and ($filter ne '')) {
     $adaptedFilter = $model->adaptRowFilter($filter);
  } elsif (exists $table->{'order'} and ($table->{'order'} == 1)) {
     # we can only move rows if they are unfiltered
     $movableRows = 1;
  }

  my @ids;
  if (not $model->customFilter()) {
    @ids =  @{$model->ids()};
  } else {
    @ids = @{$model->customFilterIds($adaptedFilter)};
  }
  if (@ids < 2) {
     $movableRows = 0;
  }
  unless ($page) {
    $page = 0;
  }

  # If the action is a preset update, choose for an edition or an
  # addition whether the editid is set or not
  if ( $action eq 'presetUpdate' ) {
      $action = 'changeAdd' if (not $editid);
      $action = 'changeEdit' if ( $editid );
  }

my $pageSize = $model->pageSizeIntValue();

my %checkAllControls;
my $checkAllProperty = $model->checkAllProperty();
if ($checkAllProperty) {
   %checkAllControls = map {
       my $field = $_;
       my $id =  $tableName . '_'. $field . '_CheckAll';
       ( $field => $id)
    } @{ $checkAllProperty } ;
}
</%init>
<& .pageTitle,
   crumbs => $model->viewCustomizer()->HTMLTitle()
&>

%  my $showEditForm =  $action eq any('changeAdd', 'changeEdit', 'clone');
%  if (not $showEditForm)  {
%    if ( $model->printableModelName() )  {
       <& PARENT:title,
          title => $model->headTitle()
        &>
        <& SELF:messagesAndHelp, model => $model &>
%    }
%    unless ((defined $onlyCustomActions) and $onlyCustomActions)  {
%        if ($changeView) {
           <& SELF:tableActionLinks,
               model => $model,
               addAction =>  (exists $actions->{'add'}),
               page => $page,
           &>

%        }
%     }
  <span id="<% 'creatingForm_' . $tableName %>"></span>
%  }


%  unless ((defined $onlyCustomActions) and $onlyCustomActions) {
%   if ($showEditForm) {
<& SELF:editFormTitle,
   action => $action,
   printableRowName => $printableRowName,
&>
<& SELF:messagesAndHelp, model => $model &>
<& SELF:editFormPopulated,
   action => $action,
   model  => $model,
   editid => $editid,
   presetParams  => \%presetParams
&>
%   }
%  }


% if (@ids or length($filter) > 0)  {
%
%   unless ((defined $onlyCustomActions) and $onlyCustomActions)   {
%    if ( $action eq 'changeAdd' or $action eq 'changeEdit' )  {
% if ($printableTableName) {
<h3>
  <% $printableTableName %>
</h3>
% }
%    }
%   }
<& SELF:topToolbar,
   tableName => $tableName,
   model     => $model,
   filter     => $filter,
&>

<table id='<% $tableName %>'  class='<%  $table->{'class'}  %>'>

<& SELF:tableHead, tableHead => \@tableHead,
                   actions   => ((defined $withoutActions) ? not  $withoutActions: 1),
                   model => $model,
                   page  => $page,
                   checkAllControls => \%checkAllControls,
 &>

    <tbody id='<% $tableName %>_tbody' >
<%perl>
    my $displayRows = 0;
    my $matches = 0;
    for ( my $idx = 0; $idx < scalar(@ids); $idx++) {
      my  $row;
      if (not $model->customFilter() and defined($adaptedFilter)) {
        $row = $model->row($ids[$idx]);
        if (not ($row->matchFilter($adaptedFilter))) {
          next;
        }
      } else {
        $matches++;
        unless ($matches > ($pageSize * $page)) { next;}
        $displayRows++;
      if ($displayRows > $pageSize) { next; };
        $row = $model->row($ids[$idx]);
      }
      my $addRowMoveHandle;
      my @trClass = qw(border);
      if ($row->readOnly) {
          push @trClass, 'readOnly';
      } elsif ($movableRows) {
         push @trClass, 'movableRow';
         $addRowMoveHandle = 1;
      }
</%perl>
      <tr class='<% "@trClass" %>' id="<% $row->id() %>">
%      foreach my $td (@{$row->elements()})      {
<%perl>
          next unless ($td->HTMLViewer());

          my @viewerParams = (data => $td);
          if ($td->isa('EBox::Types::Boolean')) {
              my $checkAllId = $checkAllControls{$td->fieldName()};
              push  @viewerParams, (checkAllId => $checkAllId);
          }
</%perl>
        <td class='tcenter'>
%          if ($addRowMoveHandle) {
           <span class='moveRowHandle'></span>
%              $addRowMoveHandle = 0;
%         }
          <&
            $td->HTMLViewer(),
             @viewerParams
          &>
        </td>
%    }

% unless ((defined $withoutActions) and $withoutActions) {
<& SELF:actionCell, model => $model,
                    actions => $actions,

                    row => $row,

                    idx  => $idx,
                    ids => \@ids,

                    changeView => $changeView,
                    page => $page
                    &>
% }
      </tr>
%     if ($displayRows == $pageSize and not (defined($filter) and length($filter) > 0) ) {
%       $matches = scalar(@ids);
%       last;
%     }
%   }
    </tbody>
</table>


<script>
$(function() {
     Zentyal.stripe('#<% $tableName %>', 'even', 'odd');
% if ($movableRows) {
     <% $model->setSortableTableJS() %>
% }
});
</script>


<div class="bDataTable">

 <& /ajax/tablePager.mas,
   model => $model,
   page => $page,
   tpages => POSIX::ceil($matches / $pageSize) - 1,
&>
</div>

<& SELF:legend, model => $model,
                    actions => $actions,
                    ids => \@ids,
                    changeView => $changeView,
                    &>

% } else {
<input type="hidden"
  id="<% $model->tableName() . '_pageSize' %>"
  value="<% $model->pageSize() %>"
>
% }

% unless ((defined $onlyCustomActions) and $onlyCustomActions) {
%  if ( $action eq 'changeEdit' and $editid ) {
<script>Zentyal.TableHelper.highlightRow('<% $editid %>', 1);</script>
%  }
% }
% # End body method
</%method>

<%method topToolbar>
<%args>
$tableName
$model
$filter => undef
</%args>
<div class="tableSearch">
         <& SELF:filterForm,
            tableName => $tableName,
            model     => $model,
            filter    => $filter,
         &>
</div>
</%method>

<%method filterForm>
<%args>
$tableName
$model
$filter
</%args>
<%init>
 my $filterId =  $tableName  .  '_filterLoading';
</%init>
<form action="javascript:void(0)">

  <input type='text'
      name='<%
              $tableName
            %>'
      id='<%
            $tableName . "_filter"
          %>'
      value="<%
              $filter
             %>"
  />
  <input type='submit'
      name='filter'
      value="<% __('Search') %>"
      title="Apply"
      onClick="Zentyal.TableHelper.setLoading('<%
                             $filterId
                            %>');
                <%
                  $model->changeViewJS( changeType => "changeList",
                     editId => 'undefined',
                     page => 0,
                     isFilter => 1)
               %>;
               return false"
  />
  <span id="<%
              $filterId
            %>"
  ></span>
</form>
</%method>

<%method editFormTitle>
<%args>
$action
$printableRowName
</%args>
%    my $formTitle;
%    if ( $action eq 'changeAdd' )  {
%       $formTitle = __x('Adding a new {row}', row => $printableRowName);
%    } elsif ( $action eq 'changeEdit' )  {
%       $formTitle = __x('Editing {row}', row => $printableRowName);
%    } elsif ($action eq 'clone') {
%       $formTitle = __x('Cloning {row}', row => $printableRowName);
%    }
<& PARENT:title, title => $formTitle &>
</%method>

<%method editFormPopulated>
<%args>
$action
$model
$editid
%presetParams  => ()
@customizerParams => ()
</%args>
<%init>
  my $tableName = $model->table()->{'tableName'};
  my @tableHead = @{$model->table()->{'tableDescription'}};
  if ($action eq 'add') {
      foreach my $element (@tableHead) {
          $element->setValue($element->defaultValue());
      }
  }

  # Fetch the data to be displayed in setters, if we are editing a row
  # we should show the contents of the current fields. If we are
  # adding a new row, the fields are empty except for a preset values
  # adding where preset contents must be shown
  my @formData;
  my @extraComponents;
  my $editRow; # must be outside of if scope to not lose the element weaken reference
  if ($editid and ($editid ne 'undefined')) {
      $editRow = $model->row($editid);
      @formData = @{$editRow->elements()};
      if ($action eq 'clone') {
          # unique fields should not be cloned
          my @uniqFields = grep { $_->unique()  } @tableHead;
          foreach my $uniqField (@uniqFields) {
              foreach my $clonedField (@formData) {
                  if ($uniqField->fieldName() eq $clonedField->fieldName()) {
                      $clonedField = $uniqField;
                      last;
                  }
              }
          }
      }
  } elsif ( ((keys %presetParams) > 0)
            and $action eq 'presetUpdate') {
      # The preset is not empty
      @formData = values(%presetParams);
  } else {
      @formData = @tableHead;
 }
</%init>
<& PARENT:editForm,
    modelName => $tableName,
    formData => \@formData,
    sections => $model->sections(),
&>

%    my $customizer = $formData[0]->model()->viewCustomizer(@customizerParams);
%    if ($customizer) {
<script>
<%   $customizer->onChangeActionsJS() %>
</script>
%     }
</%method>

<%doc>
   Method: buttons

     Show the button to submit the form

  Overrides:

     /ajax/modelViewer.mas:buttons

</%doc>
<%method buttons>
<%init>
  # Getting the arguments from the first request
  my $requestArgs = $m->request_args();
  my $model  = $requestArgs->{model};
  my $action = $requestArgs->{action};
  my $editid = $requestArgs->{editid};
  my $filter = $requestArgs->{filter};
  my $page   = $requestArgs->{page};
  my $tpages = $requestArgs->{tpages};

  my $modelName  = $model->modelName();
  my $changeView = $model->action('changeView');
  my $onlyCustomActions = $model->table()->{'onlyCustomActions'};
  my $withoutActions = $model->table()->{'withoutActions'};
  my $cloneId;

  if ( $action eq 'presetUpdate' ) {
      $action = 'changeAdd' if ( not $editid );
      $action = 'changeEdit' if ( $editid );
  } elsif ($action eq 'clone') {
      $action = 'changeAdd';
      $cloneId = $editid;
  }
</%init>
% unless ((defined $withoutActions) and $withoutActions) {
<tr>
  <td id="applyChanges">
  </td>
  <td id="<% 'buttons_' .  $modelName %>">
% unless ((defined $onlyCustomActions) and $onlyCustomActions)
% {
%  if ( $action eq 'changeAdd' )
%  {
%    # extra input for cloneId
%    if ($cloneId)  {
        <&/input/hidden.mas,
              name => $modelName . '_cloneId',
              id => $modelName . '_cloneId',
              value => $cloneId
         &>
%    }
    <& /input/submit.mas,
        class => 'btn btn-icon btn-add',
        type => 'submit',
        name => 'add',
        value => __('Add'),
        title => 'Add',
        onclick => $model->addNewRowJS($page, cloneId => $cloneId) . '; return false'
    &>
%  }
%  elsif ($action eq 'changeEdit')
%  {
    <& /input/submit.mas,
        class => '',
        type => 'submit',
        name => 'change',
        value => $model->printableActionName(),
        title => 'Change',
        onclick => $model->changeRowJS($editid, $page) . '; return false'
    &>
%  }
%  if ($changeView)
%  {
    <& /input/submit.mas,
        class => '',
        type => 'submit',
        name => 'cancel',
        value => __('Cancel'),
        title => 'Cancel',
        onclick => $model->changeViewJS(changeType => 'changeList',
                          editId => 'undefined',
                          page => $page,
                          isFilter => 0) . '; return false'
    &>
%  }
% }
  </td>
</tr>
% }
</%method>



<%method tableHead>
<%doc>
Method: tableHead

  Print the header of the table

Parameteres:
  @tableHead - list with the types of the fields of the tale's rows
  $actions   - whether to show Action row or not
  $model
  $page
</%doc>
<%args>
@tableHead
$actions
$model
$page
%checkAllControls => ()
</%args>
    <thead>
%   my $checkAll = %checkAllControls;
%   foreach my $th (@tableHead)  {
%      next unless ($th->HTMLViewer());
      <th class='<%
                   $th->class()
                  %>'>
        <%
          $th->printableName()
        %>

%    if ($checkAll) {
%      my $spaceAdded = 0;
%      my $fieldName = $th->fieldName();
%      if ($th->isa('EBox::Types::Boolean')) {
%         my $checkAllId = $checkAllControls{$fieldName};
%         if ($checkAllId) {
            <& SELF:checkAllControl,
                id => $checkAllId,
                fieldName => $fieldName,
                model     => $model,
                page      => $page,
             &>
%            $spaceAdded = 1;
%         }
%      }
%      unless ($spaceAdded) {
            <div>&nbsp;</div>
%      }
%     }
      </th>
%   }

%    if ($actions) {
      <th class='thOptions'>
        <%
          __('Action')
        %>
%      if ($checkAll) {
            <div>&nbsp;</div>
%      }
      </th>
%    }
    </thead>
</%method>

<%method checkAllControl>
<%args>
$id
$fieldName
$model
$page
</%args>
<%init>
my $tableName = $model->name();
my $divId = $id;
$divId =~ s/_CheckAll$/_div_CheckAll/;


my $checkAllJS=  $model->changeViewJS( changeType => "checkboxSetAll",
                      editId =>  $fieldName,
                      page => $page,
                      isFilter => 0);
my $uncheckAllJS=  $model->changeViewJS( changeType => "checkboxUnsetAll",
                      editId => $fieldName,
                      page => $page,
                      isFilter => 0);
my $onChangeJS =qq|if (this.checked) {$checkAllJS } else {$uncheckAllJS;} |;
my @htmlAttrs = (onchange => $onChangeJS);
push @htmlAttrs, (id => $id);
if ( $model->checkAllControlValue($fieldName)) {
  push @htmlAttrs, ('checked' => 'checked');
}

</%init>
<div id=<% $divId %> >
<input  type='checkbox'
 <& /htmlAttributes.mas, @htmlAttrs &>
/>
</div>
</%method>

<%method tableActionLinks>
<%args>
$model
$addAction
$page
</%args>
<%init>
my $tableName = $model->name();
my $checkAll  = $model->checkAllProperty();
</%init>
% if ($addAction)  {
  <button type="button" class='btn btn-icon btn-add'
      name='add'
         onClick="<%
                 $model->changeViewJS( changeType => "changeAdd",
                      editId => "undefined",
                      page => $page,
                      isFilter => 0)
                %>;return false"><% __('Add new') %></button>
% }

</%method>

<%method actionCell>
<%doc>
    Print the action cell for the row

    Parameters:
        $model - model of the table
        $actions
        $idx
        @ids
        $row   - the row printed
        $changeView
        $page  - table's page
</%doc>
<%args>
$model
$actions

$idx
@ids

$row
$changeView
$page
</%args>
        <td class='tcenter'
            id='actionsCell_<%
                              $row->{id}
                            %>'>
<%perl>
      my $rowReadOnly = $row->readOnly()   ;

      my $disabled = '';
      my ($edit, $edit_msg);
      my ($delete, $delete_msg);
      my ($clone, $clone_msg);
      if (not $rowReadOnly) {
          $edit = 'edit';
          $edit_msg = __('Edit');
          $delete = 'delete';
          $delete_msg = __('Delete');
          $clone = 'clone';
          $clone_msg = __('Clone');
      } else {
          $disabled = 'disabled';
          $edit = 'edit-inactive';
          $delete = 'delete-inactive';
          $edit_msg = __('Read-only row: edit disabled');
          $delete_msg = __('Read-only row: delete disabled');
          $clone = 'clone-inactive';
          $clone_msg = __('Read-only row: clone disabled');
      }

      my $table = $model->table();
      my $onlyCustomActions = $table->{'onlyCustomActions'};
</%perl>
<& /ajax/customActions.mas, model => $model, id => $row->{id}, type => 'image' &>

%    unless ((defined $onlyCustomActions) and $onlyCustomActions)
%    {
%      if ($actions->{'del'})
%      {
          <button
              <%
                $disabled
              %>
              type='button'
              name='del'
              value="Del"
              title="<% $delete_msg %>"
              alt="Del"
              class='btn-only-icon btn-delete'
              onClick="<%
                          $model->actionClickedJS('del',
                             $row->{id},
                              $page)
                       %>"
          ><% $delete_msg %></button>

%      }
%      if ($changeView and $actions->{'editField'})   {
          <button
              <%
                $disabled
              %>
              type='button'
              name='edit'
              value="edit"
              title="<% $edit_msg %>"
              class='btn-only-icon btn-edit'
              onClick="<%
                       $model->changeViewJS(
                             changeType => 'changeEdit',
                             editId => $row->{'id'},
                             page => $page,
                             isFilter => 0)
                       %>"
          ><% $edit_msg %></button>
%      }

%      if ($actions->{'clone'})
%      {
          <button
              <%
                $disabled
              %>
              type='button'
              name='clone'
              value="Clone"
              title="<% $clone_msg  %>"
              alt="Clone"
              class='btn-only-icon btn-clone'
              onClick="<%
                          $model->actionClickedJS('clone',
                             $row->{id},
                              $page)
                       %>"
          ><% $clone_msg  %></button>

%      }
%    }
        </td>
</%method>

<%doc>
  Method: pageTitle

     Set the page title

  Parameters:

     title - String the title

</%doc>
<%def .pageTitle>
<%args>
  $title => undef
  $crumbs => undef
</%args>
<& /title.mas,
    title => $title,
    crumbs => $crumbs
&>
</%def>


<%method legend>
<%doc>
    Print the legend of a table

    Parameters:
        $model - model of the table
        $actions
        @ids
        $changeView
</%doc>
<%args>
$model
$actions
@ids
$changeView
</%args>

<%perl>
    my $customActions = $model->{'table'}->{'customActions'};
    if ($customActions) {
</%perl>

        <br/>
        <!-- Put the legend underneath the table -->
        <table class="legend">
          <tbody><tr>

<%perl>
        foreach my $customAction ( @{$customActions} ) {
            if (exists $customAction->{'states'}) {
                foreach my $keyname (keys %{$customAction->{'states'}} ) {
                    my $state = $customAction->{'states'}->{$keyname};
</%perl>
                    <td>
                    <img
                        title="<% $state->{'printableValue'} %>"
                        alt="<% $state->{'printableValue'} %>"
                        src="<% $state->{'image'}  %>"
                    />
                    </td>
                    <td class="legendName">
                    <% $state->{'printableValue'} %>
                    </td>
<%perl>
                }
            } else {
</%perl>
                <td>
                <img
                    title="<% $customAction->{'printableValue'} %>"
                    alt="<% $customAction->{'printableValue'} %>"
                    src="<% $customAction->{'image'}  %>"
                />
                </td>
                <td class="legendName">
                <% $customAction->{'printableValue'} %>
                </td>
%           }
%       }

%# Not custom actions
%# Currently they does not show, reenable them if you want they to appear in the
%# legend. Also add the clone action if we want to show it

<%perl>
    my $edit = 'edit';
    my $edit_msg = __('Edit');
    my $delete = 'delete';
    my $delete_msg = __('Delete');

    if ( 0 && $actions->{'del'}) {
</%perl>
        <td>
        <img
            title="<% $delete_msg %>"
            alt="Del"
            src='/data/images/<% $delete %>.gif'
        />
        </td>
        <td class="legendName">
        <% $delete_msg %>
        </td>
%   }
%   if (0 && $changeView) {
        <td>
        <img
            alt="edit"
            title="<% $edit_msg %>"
            src='/data/images/<% $edit %>.gif'
        />
        </td>
        <td class="legendName">
        <% $edit_msg %>
        </td>
%   }
  </tr>
</tbody></table>

%}

</%method>

