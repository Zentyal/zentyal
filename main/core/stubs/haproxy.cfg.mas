<%doc>
   Template to set the haproxy configuration file for Zentyal

Parameters:

    bindaddress   - String the bind address.
                     Default value: 0.0.0.0
    zentyalconfdir - String the path to the HAProxy configuration folder.
    caFile         - String the CA pem file to validate SSL certificate against.
    ports          - Hash of ports used by services.

</%doc>
<%args>
    $bindaddress => '0.0.0.0'
    $caFile
    $ports
</%args>
<%init>
my $dumpedServices = {};
</%init>
% if (%{$ports}) {
global
  tune.ssl.lifetime 300

defaults
  timeout client 3600s # It is a quite high value because Apache should be the one giving the timeout always.
  timeout server 3600s # It is a quite high value because Apache should be the one giving the timeout always.
  timeout connect 3600s # It is a quite high value because Apache should be the one giving the timeout always.
  option forwardfor
  # This option may fix the problem with the proxy headers not reaching the server, but it may be a performance problem...
  # option http-server-close
%   foreach my $portNumber (keys %{$ports}) {
<& .frontend, port => $portNumber,
              conf => $ports->{$portNumber},
              caFile =>  $caFile,
              bindaddress => $bindaddress
&>
<& .backend,  port => $portNumber,
              conf => $ports->{$portNumber},
              dumpedServices => $dumpedServices
&>
%   }
% }
<%def .frontend>
<%args>
$port
$conf
$caFile
$bindaddress
</%args>
frontend ft_zentyal_<% $port %>
  mode http
% if ($conf->{isSSL}) {
%       my $certificates = '';
%       my %certSeen;
%       foreach my $service (@{$conf->{services}}) {
%           my $newCrt = 'crt ' . $service->{pathSSLCert};
%           my $seen = $certSeen{$newCrt};
%           if ($service->{isDefault}) {
%                if ($seen) { $certificates =~ s/$newCrt//};
%                $certificates = "$newCrt $certificates";
%           } elsif (not $seen) {
%               $certificates = "$certificates $newCrt";
%           }
%           $certSeen{$newCrt} = 1;
%       }
%       if ($caFile) {
  bind <% $bindaddress %>:<% $port %> ssl <% $certificates %> ciphers HIGH:MEDIUM verify optional ca-file <% $caFile %>
%       } else {
  bind <% $bindaddress %>:<% $port %> ssl <% $certificates %> ciphers HIGH:MEDIUM
%       }
% } else {
  bind <% $bindaddress %>:<% $port %>
%  }
<& .frontendSetHeaders, isSSL => $conf->{isSSL} &>

% foreach my $service (@{$conf->{services}}) {
%    my $serviceNameWithPort = $service->{name} . '_' . $service->{targetPort};
%    if (exists $service->{hosts}) {
%     foreach my $host (@{$service->{hosts}}) {
%        foreach my $path (@{ $service->{paths} }) {
  use_backend bk_zentyal_<% $serviceNameWithPort %> if { base <% $host . $path %> }
%        }
%     }
%   }
%   foreach my $domain (@{$service->{domains}}) {
%       my $domainAcl = $conf->{isSSL} ? "ssl_fc_sni $domain " :  "hdr(host) -i $domain";
  use_backend bk_zentyal_<% $serviceNameWithPort %> if { <% $domainAcl %> }
%   }
%   if ($service->{isDefault}) {
  default_backend bk_zentyal_<% $serviceNameWithPort %>
%   }
% }
</%def>
<%def .backend>
<%args>
$port
$conf
%dumpedServices
</%args>
%  foreach my $service (@{$conf->{services}}) {
%    my $serviceNameWithPort = $service->{name} . '_' . $service->{targetPort};
%    if (exists $dumpedServices{$serviceNameWithPort}) {
%      next;
%    } else {
%      $dumpedServices{$serviceNameWithPort} = 1;
%    }
backend bk_zentyal_<% $serviceNameWithPort %>
 mode http
 server srv_zentyal_<% $service->{name} %> <% $service->{targetIP} %>:<% $service->{targetPort} %>
%  }
</%def>

<%def .frontendSetHeaders>
<%args>
$isSSL
</%args>
% if ($isSSL) {
  http-request set-header X-Forwarded-Proto      https
  http-request set-header X-SSL                       %[ssl_fc]
  http-request set-header X-SSL-Client-Used           %[ssl_c_used]
  http-request set-header X-SSL-Client-Verify         %[ssl_c_verify]
  http-request set-header X-SSL-Client-SHA1           %[ssl_c_sha1]
  http-request set-header X-SSL-Client-DN             %[ssl_c_s_dn]
  http-request set-header X-SSL-Client-CN             %[ssl_c_s_dn(cn)]
  http-request set-header X-SSL-Client-O              %[ssl_c_s_dn(o)]
  http-request set-header X-SSL-Issuer                %[ssl_c_i_dn]
  http-request set-header X-SSL-Issuer-O              %[ssl_c_i_dn(o)]
  http-request set-header X-SSL-Client-Not-Before     %[ssl_c_notbefore]
  http-request set-header X-SSL-Client-Not-After      %[ssl_c_notafter]
% } else {
  http-request set-header X-Forwarded-Proto      http
% }
</%def>
